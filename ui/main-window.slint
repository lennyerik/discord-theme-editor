import { VerticalBox , HorizontalBox, StandardButton, CheckBox, Button, ScrollView} from "std-widgets.slint";
import { CSSThemeProperty, Theme, ThemeControls } from "theme.slint";
import { Helpers } from "helpers.slint";
export { CSSThemeProperty, Theme, Helpers }

export component MainWindow inherits Window {
    title: "Discord Theme Editor";
    icon: @image-url("../res/icon.png");
    min-width: 800px;
    min-height: 600px;

    property <bool> show-preview: true;
    property <string> error-message: "An error has occurred";

    callback reset-theme-to-default();
    callback load-theme();
    callback save-theme(Theme);
    callback apply-theme(Theme);

    public function show-error-dialog(message: string) {
        error-message = message;
        error-popup.show();
    }

    public function set-current-theme(theme: Theme) {
        theme-controls.set-theme(theme);
    }

    error-popup := PopupWindow {
        width: 200px;
        height: 100px;
        x: root.width / 2 - 100px;
        y: root.height / 2 - 50px;
        close-on-click: false;

        Rectangle {
            background: root.background;
            border-color: root.background.brighter(150%);
            border-width: 2px;
        }
        Dialog {
            width: 100%;
            height: 100%;
            padding-top: 15px;
            Text {
                text: error-message;
                font-size: 12pt;
            }
            StandardButton {
                kind: ok;
                clicked => { error-popup.close(); }
            }
        }
    }

    HorizontalBox {
        theme-controls := ThemeControls {
            window-height: root.height;
        } 

        VerticalBox {
            horizontal-stretch: 1;
            if show-preview : Image {
                source: @image-url("../res/discord.svg");
            }
            VerticalBox {
                alignment: end;
                HorizontalBox {
                    alignment: end;
                    CheckBox {
                        text: "Show Preview";
                        checked <=> show-preview;
                    }
                    Button {
                        text: "Reset to default";
                        clicked => { reset-theme-to-default(); }
                    }
                    Button {
                        text: "Load";
                        clicked => { load-theme(); }
                    }
                    Button {
                        text: "Save";
                        clicked => { save-theme(theme-controls.theme); }
                    }
                    StandardButton {
                        kind: apply;
                        clicked => { apply-theme(theme-controls.theme); }
                    }
                }
            }
        }
    }
}
